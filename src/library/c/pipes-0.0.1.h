/* pipes-0.0.1.h generated by valac 0.28.0, the Vala compiler, do not modify */


#ifndef __SRC_LIBRARY_C_PIPES_0_0_1_H__
#define __SRC_LIBRARY_C_PIPES_0_0_1_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT (pipes_piped_executable_output_get_type ())
#define PIPES_PIPED_EXECUTABLE_OUTPUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT, pipesPipedExecutableOutput))
#define PIPES_PIPED_EXECUTABLE_OUTPUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT, pipesPipedExecutableOutputClass))
#define PIPES_IS_PIPED_EXECUTABLE_OUTPUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT))
#define PIPES_IS_PIPED_EXECUTABLE_OUTPUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT))
#define PIPES_PIPED_EXECUTABLE_OUTPUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PIPES_TYPE_PIPED_EXECUTABLE_OUTPUT, pipesPipedExecutableOutputClass))

typedef struct _pipesPipedExecutableOutput pipesPipedExecutableOutput;
typedef struct _pipesPipedExecutableOutputClass pipesPipedExecutableOutputClass;
typedef struct _pipesPipedExecutableOutputPrivate pipesPipedExecutableOutputPrivate;

#define PIPES_TYPE_PIPED_EXECUTABLE_RUNNER (pipes_piped_executable_runner_get_type ())
#define PIPES_PIPED_EXECUTABLE_RUNNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PIPES_TYPE_PIPED_EXECUTABLE_RUNNER, pipesPipedExecutableRunner))
#define PIPES_PIPED_EXECUTABLE_RUNNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PIPES_TYPE_PIPED_EXECUTABLE_RUNNER, pipesPipedExecutableRunnerClass))
#define PIPES_IS_PIPED_EXECUTABLE_RUNNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PIPES_TYPE_PIPED_EXECUTABLE_RUNNER))
#define PIPES_IS_PIPED_EXECUTABLE_RUNNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PIPES_TYPE_PIPED_EXECUTABLE_RUNNER))
#define PIPES_PIPED_EXECUTABLE_RUNNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PIPES_TYPE_PIPED_EXECUTABLE_RUNNER, pipesPipedExecutableRunnerClass))

typedef struct _pipesPipedExecutableRunner pipesPipedExecutableRunner;
typedef struct _pipesPipedExecutableRunnerClass pipesPipedExecutableRunnerClass;
typedef struct _pipesPipedExecutableRunnerPrivate pipesPipedExecutableRunnerPrivate;

struct _pipesPipedExecutableOutput {
	GTypeInstance parent_instance;
	volatile int ref_count;
	pipesPipedExecutableOutputPrivate * priv;
};

struct _pipesPipedExecutableOutputClass {
	GTypeClass parent_class;
	void (*finalize) (pipesPipedExecutableOutput *self);
};

typedef enum  {
	PIPES_PIPED_EXECUTABLE_RUNNER_ERROR_EXECUTABLE_ERROR
} pipesPipedExecutableRunnerError;
#define PIPES_PIPED_EXECUTABLE_RUNNER_ERROR pipes_piped_executable_runner_error_quark ()
struct _pipesPipedExecutableRunner {
	GTypeInstance parent_instance;
	volatile int ref_count;
	pipesPipedExecutableRunnerPrivate * priv;
};

struct _pipesPipedExecutableRunnerClass {
	GTypeClass parent_class;
	void (*finalize) (pipesPipedExecutableRunner *self);
};

typedef void (*pipesPipedExecutableRunnerPipedExecutableFinishedDelegate) (pipesPipedExecutableOutput* output, void* user_data);

gpointer pipes_piped_executable_output_ref (gpointer instance);
void pipes_piped_executable_output_unref (gpointer instance);
GParamSpec* pipes_param_spec_piped_executable_output (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void pipes_value_set_piped_executable_output (GValue* value, gpointer v_object);
void pipes_value_take_piped_executable_output (GValue* value, gpointer v_object);
gpointer pipes_value_get_piped_executable_output (const GValue* value);
GType pipes_piped_executable_output_get_type (void) G_GNUC_CONST;
pipesPipedExecutableOutput* pipes_piped_executable_output_new_fromStream (GInputStream* stream);
pipesPipedExecutableOutput* pipes_piped_executable_output_construct_fromStream (GType object_type, GInputStream* stream);
gchar* pipes_piped_executable_output_getText (pipesPipedExecutableOutput* self);
GInputStream* pipes_piped_executable_output_getStream (pipesPipedExecutableOutput* self);
pipesPipedExecutableOutput* pipes_piped_executable_output_new (void);
pipesPipedExecutableOutput* pipes_piped_executable_output_construct (GType object_type);
GQuark pipes_piped_executable_runner_error_quark (void);
gpointer pipes_piped_executable_runner_ref (gpointer instance);
void pipes_piped_executable_runner_unref (gpointer instance);
GParamSpec* pipes_param_spec_piped_executable_runner (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void pipes_value_set_piped_executable_runner (GValue* value, gpointer v_object);
void pipes_value_take_piped_executable_runner (GValue* value, gpointer v_object);
gpointer pipes_value_get_piped_executable_runner (const GValue* value);
GType pipes_piped_executable_runner_get_type (void) G_GNUC_CONST;
pipesPipedExecutableRunner* pipes_piped_executable_runner_new (const gchar* argument, ...);
pipesPipedExecutableRunner* pipes_piped_executable_runner_construct (GType object_type, const gchar* argument, ...);
pipesPipedExecutableRunner* pipes_piped_executable_runner_constructv (GType object_type, const gchar* argument, va_list _vala_va_list);
void pipes_piped_executable_runner_run (pipesPipedExecutableRunner* self, pipesPipedExecutableRunnerPipedExecutableFinishedDelegate finishedDelegate, void* finishedDelegate_target, GError** error);
void pipes_piped_executable_runner_runWithInput (pipesPipedExecutableRunner* self, GInputStream* input, pipesPipedExecutableRunnerPipedExecutableFinishedDelegate finishedDelegate, void* finishedDelegate_target, GError** error);


G_END_DECLS

#endif
